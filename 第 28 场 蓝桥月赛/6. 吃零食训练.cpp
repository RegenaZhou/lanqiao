/*
问题描述
小蓝是一名航天工程师，同时也是一名狂热的算法竞赛爱好者。最近，他正在为即将到来的星际航天竞赛做准备。
为了更好地模拟太空中的复杂环境，小蓝设计了一套独特的训练方案。
他准备了三种不同类型的太空零食：能量棒、压缩饼干和蛋白质胶囊，分别用 0、 1 和 2 来表示。
其中，能量棒有 A 个，压缩饼干有 B 个，蛋白质胶囊有 C 个。
每次训练，小蓝会从剩余的零食中选择两种吃掉，并根据吃掉的零食类型计算训练得分。
如果吃掉的两种零食分别是 x 和 y，那么本次训练的得分就是 (x+y)mod3。
小蓝需要不断地进行训练，直到剩余的零食数量小于等于 1。

由于太空任务的特殊性，小蓝必须尽可能地提高训练效率，以适应各种突发情况。因此，他希望在训练过程中获得的总得分尽可能高。

现在，请你帮助小蓝计算，在最优的训练策略下，他能够获得的最高总得分是多少？

输入格式
第一行包含一个整数T（1≤T≤10^5），表示测试用例的数量。

接下来 T 行，每行包含三个整数 A、 B 和 C（1≤A,B,C≤10^9），分别表示能量棒、压缩饼干和蛋白质胶囊的数量。整数之间用空格分隔。

输出格式
对于每个测试用例，输出一行，包含一个整数，表示小蓝在最优训练策略下能够获得的最高总得分。

样例输入
2
1 2 3
4 5 6

样例输出
5
13*/
#include <iostream>
using namespace std;
void solve()
{
    long long a, b, c;
    cin >> a >> b >> c;
    long long df = 0;
    long long sl;
    sl = min(a, c);
    a -= sl;
    c -= sl;
    df += sl * 2;
    df += (b / 2) * 2;
    b = b % 2;
    df += min(a, b);
    df += c / 2;
    cout << df << '\n';
}
int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int t;
    cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}