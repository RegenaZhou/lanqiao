/*
问题描述
小蓝凝视着眼前尺寸为 N×N 的空白棋盘，这是新生入学挑战赛的最终任务。他需要把 1,2,…,N^2 这些数字全部填入棋盘的每个格子中，每个数字恰好使用一次。

这项任务的难点在于奇偶相间的约束条件：

如果某个格子中填入的是偶数，那么它所有上下左右相邻的格子中都必须填入奇数。
如果某个格子中填入的是奇数，那么它所有上下左右相邻的格子中都必须填入偶数。
简而言之，任何两个相邻（水平或垂直方向）的格子，其内部数字的奇偶性必须不同。

时间正在流逝，小蓝已经晕头转向。他需要迅速判断，对于给定的棋盘尺寸 N，是否存在一种满足条件的填数方案。现在，作为小蓝的智囊，请你编写一个程序，帮助他完成这个判断。

输入格式
输入仅一行，包含一个整数 N（2≤N≤10^3），表示棋盘的边长。

输出格式
如果存在满足条件的填数方案，输出 YES；否则，输出 NO。

样例输入
2

样例输出
YES

样例说明
一种满足条件的填充方案为：
[
1 2
4 3
]*/
#include <iostream>
using namespace std;
int main()
{
	ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	int n, js, ys;
	cin >> n;
	cout << "YES\n";
	return 0;
}